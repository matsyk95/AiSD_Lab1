#include <iostream>
#include <cmath>
#include <ctime>
#include <cstdlib>
#include <vector>
using namespace std;

#define INF 10000

struct Point
{
    int x;
    int y;
};


bool onSegment(Point p, Point q, Point r)
{
    if (q.x <= max(p.x, r.x) && q.x >= min(p.x, r.x) &&
            q.y <= max(p.y, r.y) && q.y >= min(p.y, r.y))
        return true;
    return false;
}

int orientation(Point p, Point q, Point r)
{
    int val = (q.y - p.y) * (r.x - q.x) -
              (q.x - p.x) * (r.y - q.y);

    if (val == 0) return 0;
        return (val > 0)? 1: 2;
}

int convexHull(Point points[], int ilosc)
{

    if (ilosc < 3) return 0;
    vector<Point> hull;
    int l = 0;
    for (int i = 1; i < ilosc; i++)
        if (points[i].x < points[l].x)
            l = i;

    int p = l, q;
    do
    {
        hull.push_back(points[p]);
        q = (p+1)%ilosc;
        for (int i = 0; i < ilosc; i++)
        {

           if (orientation(points[p], points[i], points[q]) == 2)
               q = i;
        }
        p = q;

    } while (p != l);

        int suma=0;

    // drukuj
    for (int i = 0; i < hull.size(); i++){
        cout << "(" << hull[i].x << ", "
              << hull[i].y << ")\n";
           // suma=+i+1;
            cout<<"   ";
             // cout<<suma;

            }
return suma;
}



bool doIntersect(Point p1, Point q1, Point p2, Point q2)
{

    int o1 = orientation(p1, q1, p2);
    int o2 = orientation(p1, q1, q2);
    int o3 = orientation(p2, q2, p1);
    int o4 = orientation(p2, q2, q1);


    if (o1 != o2 && o3 != o4)
        return true;
    if (o1 == 0 && onSegment(p1, p2, q1)) return true;

    if (o2 == 0 && onSegment(p1, q2, q1)) return true;

    if (o3 == 0 && onSegment(p2, p1, q2)) return true;

    if (o4 == 0 && onSegment(p2, q1, q2)) return true;

    return false;
}

//zwroc true jesli pkt nalezy
int isInside(Point polygon[], int n, Point p)
{

    if (n < 3)  return false;

    Point extreme = {INF, p.y};

    int count = 0, i = 0;
    do
    {
        int next = (i+1)%n;

        if (doIntersect(polygon[i], polygon[next], p, extreme))
        {

            if (orientation(polygon[i], p, polygon[next]) == 0)
               return onSegment(polygon[i], p, polygon[next]);

            count++;
        }
        i = next;
    } while (i != 0);

    return count&1;
}

int main()
{
    srand(time(NULL));

    //otoczka wypukla
    int bb=0;


    int ia=0;
    int ilosc=0;
    cout<<"ile punktow chcesz wpisac";
    cout<< "  ";

    cin>>ilosc;
    Point points[ia];
      for(ia = 0; ia < ilosc; ia++)
      {
          cout << "Podaj wspolrzedna x: ";
          cin >> points[ia].x;
          cout << "Podaj wspolrzedna y:  ";
          cin >> points[ia].y;
      }

    cout << "Punkty które torz¹ otoczkê wypuk³a to  "<<endl;
    convexHull(points, ilosc);
    ///////////////////////////////////////
 /*   Point polygon1[bb];
    cout<<"wpisz podane punkty z otoczki "<<endl;
    cout<<"ile będzie tych punktow ? ";
    int bbb=0;
    cin>>bbb;
              for(bb = 0; bb < bbb; bb++)
      {
          cout << "Podaj wspolrzedna x: ";
          cin >> polygon1[bb].x;
          cout << "Podaj wspolrzedna y:  ";
          cin >> polygon1[bb].y;
      }
*/
    Point polygon1[] = {{1, 1}, {8, 1}, {7, 8}, {2, 8}};



    int n = sizeof(polygon1)/sizeof(polygon1[0]);
    int c=0;
    int v=0;
    int a;
    //int suma=0;
    int b=0;
    cout<<"podaj liczbê punktów : "<<endl;
    cin>> a; //wszystkie punkty

    for(int i=1; i<a; i++){

       Point p={rand()%20+1,rand()%20+1};
     isInside(polygon1, n, p)? c++: v++;
    }
    int pole;
    pole=(400*c)/a;

    cout<<"punkty w wielokacie ";
    cout<<c<<endl;
    cout<<"punkty poza";
    cout<<v<<endl;
    cout<<"pole wynosi  :"<<pole;
    return 0;
}
